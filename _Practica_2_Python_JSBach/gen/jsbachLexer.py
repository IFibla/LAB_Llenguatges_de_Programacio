# Generated from /Users/ignasi/Documents/_Q6_/_LP_/_Practica_2_Python_JSBach/jsbach.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,216,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,
        1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,
        1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,1,28,1,29,1,29,3,29,160,8,29,1,30,1,30,5,30,
        164,8,30,10,30,12,30,167,9,30,1,31,1,31,5,31,171,8,31,10,31,12,31,
        174,9,31,1,32,1,32,5,32,178,8,32,10,32,12,32,181,9,32,3,32,183,8,
        32,1,33,1,33,5,33,187,8,33,10,33,12,33,190,9,33,1,33,1,33,1,34,1,
        34,1,34,1,34,1,34,5,34,199,8,34,10,34,12,34,202,9,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,35,4,35,211,8,35,11,35,12,35,212,1,35,1,35,2,
        188,200,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,1,0,6,1,0,65,71,1,0,48,57,1,0,65,90,2,0,65,90,
        97,122,1,0,97,122,3,0,9,10,13,13,32,32,223,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,
        3,76,1,0,0,0,5,79,1,0,0,0,7,82,1,0,0,0,9,85,1,0,0,0,11,93,1,0,0,
        0,13,97,1,0,0,0,15,101,1,0,0,0,17,105,1,0,0,0,19,108,1,0,0,0,21,
        111,1,0,0,0,23,117,1,0,0,0,25,120,1,0,0,0,27,123,1,0,0,0,29,125,
        1,0,0,0,31,128,1,0,0,0,33,130,1,0,0,0,35,133,1,0,0,0,37,135,1,0,
        0,0,39,137,1,0,0,0,41,139,1,0,0,0,43,141,1,0,0,0,45,143,1,0,0,0,
        47,145,1,0,0,0,49,147,1,0,0,0,51,149,1,0,0,0,53,151,1,0,0,0,55,153,
        1,0,0,0,57,155,1,0,0,0,59,157,1,0,0,0,61,161,1,0,0,0,63,168,1,0,
        0,0,65,175,1,0,0,0,67,184,1,0,0,0,69,193,1,0,0,0,71,210,1,0,0,0,
        73,74,5,124,0,0,74,75,5,58,0,0,75,2,1,0,0,0,76,77,5,58,0,0,77,78,
        5,124,0,0,78,4,1,0,0,0,79,80,5,60,0,0,80,81,5,45,0,0,81,6,1,0,0,
        0,82,83,5,105,0,0,83,84,5,102,0,0,84,8,1,0,0,0,85,86,5,101,0,0,86,
        87,5,108,0,0,87,88,5,115,0,0,88,89,5,101,0,0,89,90,5,32,0,0,90,91,
        5,124,0,0,91,92,5,58,0,0,92,10,1,0,0,0,93,94,5,60,0,0,94,95,5,63,
        0,0,95,96,5,62,0,0,96,12,1,0,0,0,97,98,5,60,0,0,98,99,5,33,0,0,99,
        100,5,62,0,0,100,14,1,0,0,0,101,102,5,60,0,0,102,103,5,58,0,0,103,
        104,5,62,0,0,104,16,1,0,0,0,105,106,5,60,0,0,106,107,5,60,0,0,107,
        18,1,0,0,0,108,109,5,56,0,0,109,110,5,60,0,0,110,20,1,0,0,0,111,
        112,5,119,0,0,112,113,5,104,0,0,113,114,5,105,0,0,114,115,5,108,
        0,0,115,116,5,101,0,0,116,22,1,0,0,0,117,118,5,61,0,0,118,119,5,
        61,0,0,119,24,1,0,0,0,120,121,5,33,0,0,121,122,5,61,0,0,122,26,1,
        0,0,0,123,124,5,60,0,0,124,28,1,0,0,0,125,126,5,60,0,0,126,127,5,
        61,0,0,127,30,1,0,0,0,128,129,5,62,0,0,129,32,1,0,0,0,130,131,5,
        62,0,0,131,132,5,61,0,0,132,34,1,0,0,0,133,134,5,42,0,0,134,36,1,
        0,0,0,135,136,5,47,0,0,136,38,1,0,0,0,137,138,5,43,0,0,138,40,1,
        0,0,0,139,140,5,45,0,0,140,42,1,0,0,0,141,142,5,37,0,0,142,44,1,
        0,0,0,143,144,5,40,0,0,144,46,1,0,0,0,145,146,5,41,0,0,146,48,1,
        0,0,0,147,148,5,123,0,0,148,50,1,0,0,0,149,150,5,125,0,0,150,52,
        1,0,0,0,151,152,5,35,0,0,152,54,1,0,0,0,153,154,5,91,0,0,154,56,
        1,0,0,0,155,156,5,93,0,0,156,58,1,0,0,0,157,159,7,0,0,0,158,160,
        7,1,0,0,159,158,1,0,0,0,159,160,1,0,0,0,160,60,1,0,0,0,161,165,7,
        2,0,0,162,164,7,3,0,0,163,162,1,0,0,0,164,167,1,0,0,0,165,163,1,
        0,0,0,165,166,1,0,0,0,166,62,1,0,0,0,167,165,1,0,0,0,168,172,7,4,
        0,0,169,171,7,3,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,
        0,0,172,173,1,0,0,0,173,64,1,0,0,0,174,172,1,0,0,0,175,182,7,1,0,
        0,176,178,7,1,0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,
        0,179,180,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,182,179,1,0,0,
        0,182,183,1,0,0,0,183,66,1,0,0,0,184,188,5,34,0,0,185,187,9,0,0,
        0,186,185,1,0,0,0,187,190,1,0,0,0,188,189,1,0,0,0,188,186,1,0,0,
        0,189,191,1,0,0,0,190,188,1,0,0,0,191,192,5,34,0,0,192,68,1,0,0,
        0,193,194,5,126,0,0,194,195,5,126,0,0,195,196,5,126,0,0,196,200,
        1,0,0,0,197,199,9,0,0,0,198,197,1,0,0,0,199,202,1,0,0,0,200,201,
        1,0,0,0,200,198,1,0,0,0,201,203,1,0,0,0,202,200,1,0,0,0,203,204,
        5,126,0,0,204,205,5,126,0,0,205,206,5,126,0,0,206,207,1,0,0,0,207,
        208,6,34,0,0,208,70,1,0,0,0,209,211,7,5,0,0,210,209,1,0,0,0,211,
        212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,
        215,6,35,0,0,215,72,1,0,0,0,9,0,159,165,172,179,182,188,200,212,
        1,6,0,0
    ]

class jsbachLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    MUSICALNOTE = 30
    FUNCTIONNAME = 31
    VARIABLENAME = 32
    INTEGER = 33
    NORMALSTRING = 34
    COMMENTS = 35
    WS = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'|:'", "':|'", "'<-'", "'if'", "'else |:'", "'<?>'", "'<!>'", 
            "'<:>'", "'<<'", "'8<'", "'while'", "'=='", "'!='", "'<'", "'<='", 
            "'>'", "'>='", "'*'", "'/'", "'+'", "'-'", "'%'", "'('", "')'", 
            "'{'", "'}'", "'#'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "MUSICALNOTE", "FUNCTIONNAME", "VARIABLENAME", "INTEGER", "NORMALSTRING", 
            "COMMENTS", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "MUSICALNOTE", "FUNCTIONNAME", 
                  "VARIABLENAME", "INTEGER", "NORMALSTRING", "COMMENTS", 
                  "WS" ]

    grammarFileName = "jsbach.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


